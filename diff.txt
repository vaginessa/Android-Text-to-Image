diff --git a/README.md b/README.md
index ee90cda..8889702 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-![BrushAi](https://socialify.git.ci/viethua99/BrushAi/image?description=1&descriptionEditable=%F0%9F%9A%80%20Instantly%20generate%20high-quality%20images%20based%20on%20your%20text%20prompt%20%F0%9F%9A%80&font=Inter&logo=https%3A%2F%2Ftabris.com%2Fwp-content%2Fuploads%2F2021%2F06%2Fjetpack-compose-icon_RGB.png&name=1&pattern=Brick%20Wall&theme=Dark)
+![Android-Text-to-Image](https://socialify.git.ci/viethua99/Android-Text-to-Image/image?description=1&descriptionEditable=%F0%9F%9A%80%20Instantly%20generate%20high-quality%20images%20based%20on%20your%20text%20prompt%20%F0%9F%9A%80&font=Inter&logo=https%3A%2F%2Ftabris.com%2Fwp-content%2Fuploads%2F2021%2F06%2Fjetpack-compose-icon_RGB.png&name=1&pattern=Brick%20Wall&theme=Dark)
 <p align="center">
   <a href="https://opensource.org/licenses/Apache-2.0">
      <img alt="License" src="https://img.shields.io/badge/License-Apache%202.0-blue.svg"/>
@@ -12,7 +12,7 @@
 ![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)
 
 
-<img src="docs/images/brush-ai-showcase.gif" align="right" width="280"/>
+<img src="docs/images/android-text-to-image-showcase.gif" width="280"/>
 
 ## Features
 
@@ -25,7 +25,7 @@
 ## Technical Dependencies
 - [Kotlin](https://kotlinlang.org/) based, [Coroutines](https://github.com/Kotlin/kotlinx.coroutines) + [Flow](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/) for asynchronous.
 - Jetpack
-    - Composable: 
+    - Composable: AndroidΓÇÖs recommended modern toolkit for building native UI. It simplifies and accelerates UI development on Android.
     - ViewModel: Manages UI-related data holder and lifecycle aware. Allows data to survive configuration changes such as screen rotations.
     - Room: Constructs Database by providing an abstraction layer over SQLite to allow fluent database access.
     - Navigation Component: Constructs Database by providing an abstraction layer over SQLite to allow fluent database access.
@@ -34,72 +34,68 @@
     - MVVM Architecture (View - ViewModel - Model)
     - Repository Pattern
 - [Retrofit2 & OkHttp3](https://github.com/square/retrofit): Construct the REST APIs and paging network data.
-- [ksp](https://github.com/google/ksp): Kotlin Symbol Processing API.
 - [Coil](https://github.com/coil-kt/coil): Loading images from network.
 
 
-## Architecture
-**Brush AI** is based on the MVVM architecture, which follows the [Google's official architecture guidance](https://developer.android.com/topic/architecture).
+## Architecture / Modularization
+**Android Text-to-Image** is based on the MVVM architecture, which follows the [Google's official architecture guidance](https://developer.android.com/topic/architecture).
 
-![architecture](docs/images/figure0.png)
+![architecture](docs/images/architecture.png)
 
-The overall architecture of **Brush AI** is composed of two layers; the UI layer and the data layer. Each layer has dedicated components and they have each different responsibilities, as defined below:
+The overall architecture of **Android Text-to-Image** is composed of three layers; the UI layer, the Domain layer and the Data layer. Each layer has dedicated components and they have each different responsibilities, as defined below:
 
-**Brush AI** was built with [Guide to app architecture](https://developer.android.com/topic/architecture), so it would be a great sample to show how the architecture works in real-world projects.
+- **Re-usability**: Modularizing reusable codes properly enable opportunities for code sharing and limits code accessibility in other modules at the same time.
+- **Parallel Building**: Each module can be run in parallel and it reduces the build time.
+- **Strict visibility control**: Modules restrict to expose dedicated components and access to other layers, so it prevents they're being used outside the module
+- **Decentralized focusing**: Each developer team can assign their dedicated module and they can focus on their own modules.
 
+For more information, check out the [Guide to Android app modularization](https://developer.android.com/topic/modularization).
 
 ### Architecture Overview
 
-![architecture](docs/images/figure1.png)
+![architecture](docs/images/architecture-overview.png)
 
-- Each layer follows [unidirectional event/data flow](https://developer.android.com/topic/architecture/ui-layer#udf); the UI layer emits user events to the data layer, and the data layer exposes data as a stream to other layers.
-- The data layer is designed to work independently from other layers and must be pure, which means it doesn't have any dependencies on the other layers.
+- The UI layer emits user events to the data layer, and the data layer exposes data as a stream to other layers.
+- The Domain layer is responsible for encapsulating complex business logic, or simple business logic that is reused by multiple ViewModels.
+- The Data layer is designed to work independently from other layers and must be pure, which means it doesn't have any dependencies on the other layers.
 
 With this loosely coupled architecture, you can increase the reusability of components and scalability of your app.
 
 ### UI Layer
 
-![architecture](docs/images/figure2.png)
-
-The UI layer consists of UI elements to configure screens that could interact with users and [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel) that holds app states and restores data when configuration changes.
-- UI elements observe the data flow via [DataBinding](https://developer.android.com/topic/libraries/data-binding), which is the most essential part of the MVVM architecture.
-- With [Bindables](https://github.com/skydoves/bindables), which is an Android DataBinding kit for notifying data changes, you can implement two-way binding, and data observation in XML very clean.
-
-### Data Layer
+![architecture](docs/images/ui-layer.png)
 
-![architecture](docs/images/figure3.png)
+The UI layer consists of UI elements and UI previews to configure screens that could interact with users and [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel) that holds UI states and restores data when configuration changes.
+- UI composable components observe the UI states via coroutine flows, which is the most essential part of the MVVM architecture.
 
-The data Layer consists of repositories, which include business logic, such as querying data from the local database and requesting remote data from the network. It is implemented as an offline-first source of business logic and follows the [single source of truth](https://en.wikipedia.org/wiki/Single_source_of_truth) principle.<br>
+### Domain Layer
 
-**Brush AI** is an offline-first app is an app that is able to perform all, or a critical subset of its core functionality without access to the internet.
-So users don't need to be up-to-date on the network resources every time and it will decrease users' data consumption. For further information, you can check out [Build an offline-first app](https://developer.android.com/topic/architecture/data-layer/offline-first).
+![architecture](docs/images/domain-layer.png)
 
-## Modularization
+The Domain Layer consists of use cases, which fit between ViewModels from the UI layer and repositories from the data layer, they communicate with the UI layer the same way repositories doΓÇöusing coroutines.<br>
 
-![architecture](docs/images/figure4.png)
+### Data Layer
 
-**Brush AI** adopted modularization strategies below:
+![architecture](docs/images/data-layer.png)
 
-- **Re-usability**: Modularizing reusable codes properly enable opportunities for code sharing and limits code accessibility in other modules at the same time.
-- **Parallel Building**: Each module can be run in parallel and it reduces the build time.
-- **Strict visibility control**: Modules restrict to expose dedicated components and access to other layers, so it prevents they're being used outside the module
-- **Decentralized focusing**: Each developer team can assign their dedicated module and they can focus on their own modules.
+The Data layer consists of repositories, which include business logic, such as querying data from the local database and requesting remote data from the network. It is implemented as an offline-first source of business logic and follows the [single source of truth](https://en.wikipedia.org/wiki/Single_source_of_truth) principle.<br>
 
-For more information, check out the [Guide to Android app modularization](https://developer.android.com/topic/modularization).
+**Android Text-to-Image** is an offline-first app is an app that is able to perform all, or a critical subset of its core functionality without access to the internet.
+So users don't need to be up-to-date on the network resources every time and it will decrease users' data consumption. For further information, you can check out [Build an offline-first app](https://developer.android.com/topic/architecture/data-layer/offline-first).
 
 ## Stable Diffusion API
 
 <img src="https://media.licdn.com/dms/image/C560BAQHKCfkGo3NAFg/company-logo_200_200/0/1674489509554?e=2147483647&v=beta&t=gQQAyRwXUtoKjaxepavRkBsaxjY0L-qcXc9o-eykCYI" align="right" width="12%"/>
 
-Brush AI using the [Stable Diffusion API](https://stablediffusionapi.com/) for constructing RESTful API.<br>
+Android Text-to-Image using the [Stable Diffusion API](https://stablediffusionapi.com/) for constructing RESTful API.<br>
 StableDiffusionAPI provides a RESTful API interface to highly detailed objects built from thousands of lines of data related to text to images.
 
 ## Find this repository useful? :heart:
-Support it by joining __[stargazers](https://github.com/viethua99/BrushAI/stargazers)__ for this repository. :star: <br>
+Support it by joining __[stargazers](https://github.com/viethua99/Android-Text-to-Image/stargazers)__ for this repository. :star: <br>
 Also, __[follow me](https://github.com/viethua99)__ on GitHub for my next creations! ≡ƒñ⌐
 
 
 ## License
 
-**Brush AI** is distributed under the terms of the Apache License (Version 2.0). See the
+**Android Text-to-Image** is distributed under the terms of the Apache License (Version 2.0). See the
 [license](LICENSE) for more information.
\ No newline at end of file
diff --git a/docs/images/brush-ai-showcase.gif b/docs/images/android-text-to-image-showcase.gif
similarity index 100%
rename from docs/images/brush-ai-showcase.gif
rename to docs/images/android-text-to-image-showcase.gif
diff --git a/docs/images/architecture-overview.png b/docs/images/architecture-overview.png
new file mode 100644
index 0000000..44f28a1
Binary files /dev/null and b/docs/images/architecture-overview.png differ
diff --git a/docs/images/architecture.png b/docs/images/architecture.png
new file mode 100644
index 0000000..4e778d9
Binary files /dev/null and b/docs/images/architecture.png differ
diff --git a/docs/images/data-layer.png b/docs/images/data-layer.png
new file mode 100644
index 0000000..a5d2d19
Binary files /dev/null and b/docs/images/data-layer.png differ
diff --git a/docs/images/domain-layer.png b/docs/images/domain-layer.png
new file mode 100644
index 0000000..01463a8
Binary files /dev/null and b/docs/images/domain-layer.png differ
diff --git a/docs/images/figure0.png b/docs/images/figure0.png
deleted file mode 100644
index f8f3cc7..0000000
Binary files a/docs/images/figure0.png and /dev/null differ
diff --git a/docs/images/figure1.png b/docs/images/figure1.png
deleted file mode 100644
index ac0c28f..0000000
Binary files a/docs/images/figure1.png and /dev/null differ
diff --git a/docs/images/figure2.png b/docs/images/figure2.png
deleted file mode 100644
index 7ff8993..0000000
Binary files a/docs/images/figure2.png and /dev/null differ
diff --git a/docs/images/figure3.png b/docs/images/figure3.png
deleted file mode 100644
index bbb557f..0000000
Binary files a/docs/images/figure3.png and /dev/null differ
diff --git a/docs/images/figure4.png b/docs/images/figure4.png
deleted file mode 100644
index 76f3633..0000000
Binary files a/docs/images/figure4.png and /dev/null differ
diff --git a/docs/images/ui-layer.png b/docs/images/ui-layer.png
new file mode 100644
index 0000000..8604c8e
Binary files /dev/null and b/docs/images/ui-layer.png differ
